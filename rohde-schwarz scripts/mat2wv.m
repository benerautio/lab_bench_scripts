function mat2wv(vfcSignal, sFilename, fSampleRate, bOversample, bNormalize)
% mat2wv(vfcSignal, sFilename, fSampleRate, bOversample, bNormalize)
% MAT2WV creates an SMU waveform file from a Matlab vector.
%
% Input parameters:
% vfcSignal: Input data vector
% sFilename: Filename of the generated waveform file
% fSampleRate: Sample rate of the input signal in Hz
% bOversample: 
%   True: Oversampling of the waveform file by factor two
%  False: No oversampling of the waveform file
% bNormalize:
%   True: The signal is normalized by the max. magnitude
%  False: The signal is not normalized. The maximum magnitude
%         of the signal shall not exceed 1.0.
% Copyright    : Rohde & Schwarz GmbH & Co. KG, Munich, Germany
% File version : \main\13    18 Dec 2009 15:45:23   feldhaus
% Revision     : V2.2
% Date         : 2016/04/14 15:01:59

% Intialize interpolation filter
% Designed with b = intfilt(2,20,0.9);
% Relevant coefficients only
b_halfband = [-0.000234697800196, 0.000505791659277, -0.000922109299273, 0.001526632688273, ...
              -0.002368920497169, 0.003505808776361, -0.005002687141690, 0.006935803493802, ...
              -0.009396342287869, 0.012497552496263, -0.016387225967547, 0.021269929245697, ...
              -0.027448014278071, 0.035401459104564, -0.045955668394675, 0.060673621891333, ...
              -0.082920432066362, 0.121482129316537, -0.208656899126051, 0.635429028437100 ];

% Force row vector
vfcSignal = vfcSignal(:).';

% Oversampling
if bOversample
  % Filter design
  Nhalf = length(b_halfband);
  b = zeros(4*Nhalf-1,1);
  b(1:2:2*Nhalf-1) = b_halfband;
  b(2*Nhalf) = 1.0;
  b(2*Nhalf+1:2:4*Nhalf-1) = fliplr(b_halfband);  
  L = length(b);
  % Oversampling
  vfcSignalUp = zeros(1,2*length(vfcSignal));
  vfcSignalUp(1:2:end) = vfcSignal;
  vfcSignalUpCyc = [vfcSignalUp(end-(L-1)/2+1:end),vfcSignalUp,vfcSignalUp(1:(L-1)/2)];
  % Filter
  vfcSignalUpCyc = filter(b,1,vfcSignalUpCyc);
  vfcSignal = vfcSignalUpCyc((L-1)/2+1:end-(L-1)/2);
end  

% Number of samples
iNOfSamples = length(vfcSignal);

% Normalize signal
if bNormalize
  vfcSignal = vfcSignal / max(abs(vfcSignal));
  % Remark:
  % We do not normalize to max RE/IM to allow arbitrary phase offsets
  % or frequency shifts without overflow
    
  vfcSignal = vfcSignal / max(abs(vfcSignal));
  
  % Calculate the peak value
  fPeakPower = max(abs(vfcSignal).^2);
  fPeakPowerdBfs = -10*log10(fPeakPower);
  % Calculate the RMS value
  fMeanPower = mean(abs(vfcSignal).^2);
  fRMSdBfs = -10*log10(fMeanPower);

else
  
  % Do not normalize the signal
  fPeakPowerdBfs = 0;
  fRMSdBfs = 0;
  
end

% Quantization to 16 bit
iMaxInt = 32767;
vicData = int16(vfcSignal*iMaxInt);
clear vfcSignal;

viDataInterleaved = reshape([real(vicData);imag(vicData)],1,2*iNOfSamples);
clear vicData;

% Write waveform file
fid = fopen(sFilename,'w');
fprintf(fid,'%s','{TYPE: SMU-WV,0}');
fprintf(fid,'%s','{COMMENT: Generated by mat2wv.m}');
fprintf(fid,'%s',['{DATE: ' datestr(now,'yyyy-mm-dd;HH:MM:SS') '}']);
fprintf(fid,'%s',['{LEVEL OFFS: ' num2str(fRMSdBfs) ', ' num2str(fPeakPowerdBfs) '}']);
if bOversample
  fprintf(fid,'%s',['{CLOCK: ' num2str(2*fSampleRate) '}']);
else
  fprintf(fid,'%s',['{CLOCK: ' num2str(fSampleRate) '}']);
end  
fprintf(fid,'%s',['{SAMPLES: ' num2str(iNOfSamples) '}']);
fprintf(fid,'%s',['{WAVEFORM-' num2str(4*iNOfSamples+1) ':#']);
fwrite(fid,viDataInterleaved,'int16');
fprintf(fid,'%s','}');
fclose(fid);

